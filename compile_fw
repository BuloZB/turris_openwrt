#!/bin/bash -xe

# Cleaning
[ -d ./tmp ] && rm -rf ./tmp
[ -d ./bin ] && rm -rf ./bin
[ -d ./bin-nor ] && rm -rf ./bin-nor
[ -d ./logs ] && rm -rf ./logs
[ -d ./logs-nand ] && rm -rf ./logs-nand
[ -d ./logs-nor ] && rm -rf ./logs-nor
[ -d ./logs-initram ] && rm -rf ./logs-initram

make_defconfig() {
	make defconfig
	egrep '^(#[[:space:]]+)?CONFIG_KERNEL' configs/common configs/$TARGET_BOARD | sed 's|.*:||' >> ./.config
}

if [ "$1" = turris ] || [ "$1" = omnia ]; then
	export TARGET_BOARD="$1"
	shift
fi

if [ -z "$TARGET_BOARD" ]; then
	echo "You have to specify target board - options are 'turris' or 'omnia'"
	exit 1
fi
# Clean feeds
./scripts/feeds clean

# Install luci feed
./scripts/feeds update -a
# Patch feeds
pushd patches
for feed in *; do
	pushd $feed
	for patch in *; do
		pushd ../../feeds/$feed
		patch -p1 < ../../patches/$feed/$patch
		popd
	done
	popd
done
popd
./scripts/feeds install -a

# Uninstall broken pkgs
[ \! -f ./disabled_packages.common ]        || ./scripts/feeds uninstall $(echo $(cut -d '#' -f1 ./disabled_packages.common))
[ \! -f ./disabled_packages.$TARGET_BOARD ] || ./scripts/feeds uninstall $(echo $(cut -d '#' -f1 ./disabled_packages.$TARGET_BOARD))

# Build NAND FW
[ -z "$OPENWRT_BRANCH" ] || PKG_BRANCH="-$OPENWRT_BRANCH"
cat configs/common configs/$TARGET_BOARD | sed -e "s|@BOARD@|$TARGET_BOARD|" -e "s|@BRANCH@|$PKG_BRANCH|" > .config
[ -n "$BUILD_ALL" ] && echo "CONFIG_ALL=y" >> .config && echo "CONFIG_SDK=y" >> .config
[ -n "$USE_CCACHE" ] && echo "CONFIG_CCACHE=y" >> .config
if [ -f "$HOME"/mime.key ]; then
	echo "CONFIG_SIGNED_PACKAGES=y" >> .config
	rm -f key-build key-build.pub
	cp "$HOME/mime.key" key-build
	cp "$HOME/mime.pub" key-build.pub
fi
make_defconfig
if [ -d .git ] ; then
	git log -n1 --format='%H' >files/etc/git-version
fi
make clean
[ -z "$BUILD_ALL" ] || make dirclean
make "$@"
# Nice junit export
cat > logs/junit.xml << EOF
<?xml version='1.0' encoding='utf-8'?>
<testsuites errors='`cat logs/package/error.txt | wc -l`' tests='`find logs/package/ -name compile.txt | wc -l`'>
EOF
(cd logs; find package/ -name compile.txt; cd ..) | while read log; do
PKG_NAME="`dirname $log`"
if grep "ERROR: $PKG_NAME failed" logs/package/error.txt; then
cat >> logs/junit.xml << EOF
<testsuite errors='1' name='$PKG_NAME' tests='1'>
<testcase name='compile'>
<error message='$PKG_NAME failed to compile' type='error'><![CDATA[
`tail -n 100 logs/$log`
]]></error>
</testcase>
</testsuite>
EOF
else
cat >> logs/junit.xml << EOF
<testsuite errors='0' failures='0' name='$PKG_NAME' tests='1'>
<testcase name='compile'/>
</testsuite>
EOF
fi
done
cat >> logs/junit.xml << EOF
</testsuites>
EOF
[ \! -d ./logs ] || mv ./logs ./logs-nand

if [ "$TARGET_BOARD" = turris ]; then
	#Build initramfs
	echo -e "CONFIG_TARGET_ROOTFS_INITRAMFS=y\nCONFIG_TARGET_INITRAMFS_COMPRESSION_XZ=y" >> .config
	make_defconfig
	make target/linux/compile "$@"
	[ \! -d ./logs ] || mv ./logs ./logs-initram

	cp build_dir/target-powerpc_*/linux-mpc85xx_p2020-nand/zImage-initramfs bin/mpc85xx/turris-initramfs-zimage

	# Preserve the uncompressed image too
	mv build_dir/target-powerpc_*/root-mpc85xx bin/mpc85xx/root
	cd bin/mpc85xx/root
	rm var
	find -type l ! -exec test -r {} \; -delete
	cd ../../..
elif [ "$TARGET_BOARD" = omnia ]; then
	mv bin/mvebu-musl/openwrt-mvebu-Turris-Omnia-rootfs.tar.gz bin/mvebu-musl/omnia-medkit-`date +%Y%m%d%H%M`.tar.gz
	# Preserve the uncompressed image too
	mv build_dir/target-arm_*/root-mvebu* bin/mvebu-musl/root
	cd bin/mvebu-musl/root
	rm var
	find -type l ! -exec test -r {} \; -delete
	cd ../../..
fi

# Clean
[ -d ./bin-nand ] && rm -rf ./bin-nand
mv ./bin ./bin-nand
[ -d ./tmp ] && rm -rf ./tmp

if [ "$TARGET_BOARD" = turris ]; then
	# Build NOR FW
	cp configs/config-turris-nor .config
	[ -n "$USE_CCACHE" ] && echo "CONFIG_CCACHE=y" >> .config
	make defconfig
	make clean
	make "$@"
	[ \! -d ./logs ] || mv ./logs ./logs-nor
	[ -d ./bin/mpc85xx/packages ] && rm -rf ./bin/mpc85xx/packages
	[ -d ./bin-nor ] && rm -rf ./bin-nor
	mv ./bin ./bin-nor
elif [ "$TARGET_BOARD" = omnia ]; then
	cp configs/config-omnia-rescue .config
	[ -n "$USE_CCACHE" ] && echo "CONFIG_CCACHE=y" >> .config
	make defconfig CONFDEFAULT=n
	make clean
	make "$@"
	echo -e "CONFIG_TARGET_ROOTFS_INITRAMFS=y\nCONFIG_TARGET_INITRAMFS_COMPRESSION_XZ=y" >> .config
	sed -i 's/^TARGET_ROOTFS_INCLUDE_KERNEL=.*/# TARGET_ROOTFS_INCLUDE_KERNEL is not set/' .config
	sed -i 's/^CONFIG_TARGET_ROOTFS_INCLUDE_DTB.*/# CONFIG_TARGET_ROOTFS_INCLUDE_DTB is not set/' .config
	make defconfig
	cp build_dir/target-arm_cortex-a9+vfpv3_musl-*_eabi/root-mvebu/boot/uboot* build_dir
	rm -f build_dir/target-arm_cortex-a9+vfpv3_musl-*_eabi/root-mvebu/boot/* build_dir/target-arm_cortex-a9+vfpv3_musl-*_eabi/root-mvebu/etc/rc.d/*rainbow
	make target/linux/compile "$@"
	cp `ls -d build_dir/target-arm_cortex-a9+vfpv3_musl-*_eabi/linux-mvebu`/{zImage-initramfs,zImage-initramfs-armada-385-turris-omnia}
	cat build_dir/target-arm_cortex-a9+vfpv3_musl-*_eabi/linux-mvebu/linux-4.4*/arch/arm/boot/dts/armada-385-turris-omnia.dtb >> `ls -d build_dir/target-arm_cortex-a9+vfpv3_musl-*_eabi/linux-mvebu`/zImage-initramfs-armada-385-turris-omnia
	[ \! -d ./logs ] || mv ./logs ./logs-initram
	cp build_dir/target-arm_*/linux-mvebu/zImage-initramfs-armada-385-turris-omnia bin/mvebu-musl/omnia-initramfs-zimage
	[ "`du -b bin/mvebu-musl/omnia-initramfs-zimage | sed 's|[[:blank:]].*||'`" -lt 7000000 ] || exit 1
	mv build_dir/uboot* bin/mvebu-musl
	mkdir -p bin/mvebu-musl/x86-64
	cp build_dir/host/uboot-turris-omnia*/turris-omnia-uboot/* bin/mvebu-musl/x86-64
	mv bin bin-nor
fi
