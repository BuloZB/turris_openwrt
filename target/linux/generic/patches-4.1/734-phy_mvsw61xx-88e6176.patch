--- a/drivers/net/phy/mvsw61xx.c	2015-09-15 10:58:04.305185015 +0200
+++ b/drivers/net/phy/mvsw61xx.c	2015-09-22 12:44:45.596709963 +0200
@@ -566,6 +566,106 @@
 	return mvsw61xx_update_state(dev);
 }
 
+static int smi_wait_mask_raw(struct switch_dev *dev, int addr,
+		int reg, u16 mask, u16 val)
+{
+	int i = 100;
+	u16 r;
+
+	do {
+		r = sr16(dev, addr, reg);
+		if ((r & mask) == val)
+			return 0;
+	} while (--i > 0);
+
+	return -ETIMEDOUT;
+}
+
+
+
+static u16 smisr16(struct switch_dev *dev, int addr, int reg)
+{
+	int ret;
+	u16 ind_addr;
+
+	/* Indirect read: First, make sure switch is free */
+	ret=smi_wait_mask_raw(dev, MV_SWITCH_GLOBAL2,
+		MV_SWITCH_GLOBAL2_SMI_COMMAND, MV_INDIRECT_INPROGRESS, 0);
+
+	/* Load address and request read */
+	ind_addr = MV_INDIRECT_READ | (addr << MV_INDIRECT_ADDR_S) | reg;
+	sw16(dev, MV_SWITCH_GLOBAL2, MV_SWITCH_GLOBAL2_SMI_COMMAND, ind_addr);
+
+	/* Wait until it's ready */
+	smi_wait_mask_raw(dev, MV_SWITCH_GLOBAL2, MV_SWITCH_GLOBAL2_SMI_COMMAND,
+		MV_INDIRECT_INPROGRESS, 0);
+
+	/* Read the requested data */
+	return sr16(dev, MV_SWITCH_GLOBAL2, MV_SWITCH_GLOBAL2_SMI_DATA);
+
+}
+
+static void smisw16(struct switch_dev *dev, int addr, int reg, u16 val)
+{
+	u16 ind_addr;
+
+        /* Indirect write: First, make sure switch is free */
+	smi_wait_mask_raw(dev, MV_SWITCH_GLOBAL2, MV_SWITCH_GLOBAL2_SMI_COMMAND,
+		MV_INDIRECT_INPROGRESS, 0);
+
+        /* Load the data to be written */
+        sw16(dev, MV_SWITCH_GLOBAL2, MV_SWITCH_GLOBAL2_SMI_DATA, val);
+
+        /* Wait again for switch to be free */ 
+	smi_wait_mask_raw(dev, MV_SWITCH_GLOBAL2, MV_SWITCH_GLOBAL2_SMI_COMMAND,
+		MV_INDIRECT_INPROGRESS, 0);
+
+        /* Load address, and issue write command */
+        ind_addr = MV_INDIRECT_WRITE | (addr << MV_INDIRECT_ADDR_S) | reg;
+        sw16(dev, MV_SWITCH_GLOBAL2, MV_SWITCH_GLOBAL2_SMI_COMMAND, ind_addr);
+}
+
+static void mvsw6176_quirks(struct switch_dev *dev)
+{
+	int i;
+	u16 pagereg, copperreg, copperspecreg, reg;
+
+	for (i=0; i<=MV6176_MAX_PHY; i++) {
+		pagereg=smisr16(dev, PHY_ADDR(i, PHY_PAGE_REG));
+		pagereg&=~(PHY_PAGE_MASK);
+		smisw16(dev, PHY_ADDR(i, PHY_PAGE_REG), pagereg);
+
+		copperspecreg=smisr16(dev, PHY_ADDR(i, PHY_SPECCONTROL_REG));
+		copperspecreg&=~PHY_SPECCONTROL_PWR;
+		smisw16(dev, PHY_ADDR(i, PHY_SPECCONTROL_REG), copperspecreg);
+
+		copperreg=smisr16(dev, PHY_ADDR(i, PHY_CONTROL_REG));
+		copperreg&=~PHY_CONTROL_PWR;
+		smisw16(dev, PHY_ADDR(i, PHY_CONTROL_REG), copperreg);
+
+		printk("mvsw debug: i=%d pagereg=0x%04x, copperreg=0x%04x\n, cospcreg=0x%04x\n", i, pagereg, copperreg, copperspecreg);
+	}
+
+	/* Enable forwarding (STP mode) */
+	for (i = 0; i < dev->ports; i++) {
+		reg = sr16(dev, MV_PORTREG(CONTROL, i)) |
+			MV_PORTCTRL_FORWARDING;
+		sw16(dev, MV_PORTREG(CONTROL, i), reg);
+	}
+
+	/* Disable PHYDetect on CPU ports. */
+	for(i=5; i<=6; i++) {
+		reg = sr16(dev, MV_PORTREG(STATUS, i));
+		reg &= ~(MV_PORT_STATUS_PHYDETECT);
+		sw16(dev, MV_PORTREG(STATUS, i), reg);
+
+		// RGMII timing
+		reg = sr16(dev, MV_PORTREG(PHYCTL, i));
+		reg |= 0xc000;
+		sw16(dev, MV_PORTREG(PHYCTL, i), reg);
+	}
+}
+
 static int mvsw61xx_reset(struct switch_dev *dev)
 {
 	struct mvsw61xx_state *state = get_state(dev);
@@ -613,11 +713,33 @@
 
 	mvsw61xx_update_state(dev);
 
+	/* Hack Hack Hack */
+	mvsw6176_quirks(dev);
+
+
 	/* Re-enable ports */
 	for (i = 0; i < dev->ports; i++) {
 		reg = sr16(dev, MV_PORTREG(CONTROL, i)) |
 			MV_PORTCTRL_FORWARDING;
 		sw16(dev, MV_PORTREG(CONTROL, i), reg);
+
+		/* debug debug debug */
+		int j;
+		for(j=0; j<=0x1b; j++) {
+		reg=sr16(dev, 0x10+i, j);
+		printk("mvsw debug: port=%d port_status_%02x=0x%04x\n", i, j, reg);
+		}
+
+	}
+
+	// debug debug debug
+	for (i=0;i<=0xf;i++) {
+		reg=sr16(dev, MV_SWITCH_GLOBAL, i);
+		printk("mvsw debug: global_%02x=0x%04x\n", i, reg);
+	}
+	for (i=0;i<=0x1d;i++) {
+		reg=sr16(dev, MV_SWITCH_GLOBAL2, i);
+		printk("mvsw debug: global2_%02x=0x%04x\n", i, reg);
 	}
 
 	return 0;
@@ -798,6 +920,9 @@
 	state->dev.ops = &mvsw61xx_ops;
 	state->dev.alias = dev_name(&pdev->dev);
 
+	if (state->model == MV_IDENT_VALUE_6176)
+		mvsw6176_quirks(&state->dev);
+
 	err = register_switch(&state->dev, NULL);
 	if (err < 0)
 		goto out_err;
--- a/drivers/net/phy/mvsw61xx.h	2015-09-11 14:14:24.542536308 +0200
+++ b/drivers/net/phy/mvsw61xx.h	2015-09-22 12:44:48.284731488 +0200
@@ -55,6 +55,7 @@
 };
 #define MV_PORT_STATUS_SPEED_SHIFT	8
 #define MV_PORT_STATUS_SPEED_MASK	(3 << 8)
+#define MV_PORT_STATUS_PHYDETECT	(1 << 12)
 
 enum {
 	MV_PORTCTRL_DISABLED		= (0 << 0),
@@ -229,6 +230,19 @@
 #define MV_FDB_HI_SHIFT			4
 #define MV_FDB_LO_SHIFT			12
 
+#define PHY_ADDR(_n, _type) _n, _type
+#define PHY_CONTROL_REG 0
+#define PHY_SPECCONTROL_REG 16
+#define PHY_PAGE_REG 22
+
+#define PHY_PAGE_MASK 0xFF
+#define PHY_CONTROL_PWR (1<<11)
+#define PHY_SPECCONTROL_PWR (1<<2)
+
+#define MV_SWITCH_GLOBAL2_SMI_COMMAND 0x18
+#define MV_SWITCH_GLOBAL2_SMI_DATA 0x19
+#define MV6176_MAX_PHY 4
+
 struct mvsw61xx_state {
 	struct switch_dev dev;
 	struct mii_bus *bus;
